{"version":3,"sources":["common-info/index.ts","redux/index.ts","components/SelectMode.tsx","components/PlayButton.tsx","components/TextField.tsx","components/Message.tsx","helpers/index.ts","components/Table.tsx","components/Game.tsx","components/Winners.tsx","App.tsx","index.tsx"],"names":["Color","Stage","Action","GAME_WINNERS_URL","newState","difficulties","currentMode","playerName","winners","score","stage","SETTING","createStore","state","action","type","SET_DIFFICULTIES","payload","SET_CURRENT_MODE","SET_PLAYER_NAME","SET_WINNERS","SET_SCORE","SET_STAGE","composeWithDevTools","applyMiddleware","thunk","SelectMode","useSelector","dispatch","useDispatch","gameModes","push","Object","keys","className","value","onChange","event","target","disabled","map","key","Button","label","isDisabled","PLAYING","WIN","Error","onClick","style","opacity","TextField","placeholder","Message","message","color","isStartGameMode","isAbsentPlayerName","player","computer","fetchWrapper","url","options","fetch","apply","arguments","then","res","ok","json","status","catch","err","console","error","Table","props","scoreLocal","timerId","cell","isStarted","table","coordinates","newTable","size","Array","fill","el","DEFAULT","newCoordinates","array","row","col","timer","clearTimer","fillSelectedCell","RED","incrementComputerScore","winner","checkWinner","sendResultsAndDispatchThem","dispatchStageWin","selectRandomCell","BLUE","startTimer","dispatchScore","GREEN","incrementPlayerScore","store","delay","window","setTimeout","clearTimeout","length","from","to","randomIndex","Math","floor","random","splice","field","index","pow","date","Date","toLocaleString","getState","params","method","headers","body","JSON","stringify","newProps","this","rowIndex","colorIndex","backgroundColor","React","Component","connect","Game","Winners","memo","id","reverse","App","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcab8742.chunk.js","sourcesContent":["export const GAME_SETTINGS_URL = 'https://starnavi-frontend-test-task.herokuapp.com/game-settings';\nexport const GAME_WINNERS_URL = 'https://starnavi-frontend-test-task.herokuapp.com/winners';\n\nexport enum Color {\n  DEFAULT = 'transparent',\n  BLUE = '#42d8e8',\n  GREEN = '#00e871',\n  RED = '#e85a5e',\n};\n\nexport enum Stage {\n  SETTING,\n  PLAYING,\n  WIN\n};\n","import { createStore, applyMiddleware, Reducer, AnyAction } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport * as T from \"../types\";\nimport { Stage } from '../common-info';\n\n\n// Actions\nexport enum Action {\n  SET_DIFFICULTIES = 'SET_DIFFICULTIES',\n  SET_CURRENT_MODE = 'SET_CURRENT_MODE',\n  SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n  SET_WINNERS = 'SET_WINNERS',\n  SET_SCORE = 'SET_SCORE',\n  SET_STAGE = 'SET_STAGE',\n};\n\n// Create default state\nfunction newState(): T.State {\n  return {\n    difficulties: null,\n    currentMode: null,\n    playerName: null,\n    winners: null,\n    score: [0, 0],\n    stage: Stage.SETTING,\n  };\n}\n\n// Reducer\nconst reducer: Reducer<T.State, AnyAction & { payload: any }> =\n  (state = newState(), action) => {\n\n    switch (action.type) {\n\n      case Action.SET_DIFFICULTIES:\n        return {\n          ...state,\n          difficulties: action.payload\n        };\n\n      case Action.SET_CURRENT_MODE:\n        return {\n          ...state,\n          currentMode: action.payload\n        };\n\n      case Action.SET_PLAYER_NAME:\n        return {\n          ...state,\n          playerName: action.payload\n        };\n\n      case Action.SET_WINNERS:\n        return {\n          ...state,\n          winners: action.payload\n        };\n\n      case Action.SET_SCORE:\n        return {\n          ...state,\n          score: action.payload\n        };\n\n      case Action.SET_STAGE:\n        return {\n          ...state,\n          stage: action.payload\n        };\n\n      default:\n        return state;\n    }\n  }\n\n\n// Store\nexport default createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  )\n);","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Action } from '../redux';\nimport * as T from \"../types\";\nimport { Stage } from '../common-info';\nimport './SelectMode.scss';\n\n\nconst START_GAME_MODE = 'Pick game mode';\n\n\nfunction SelectMode() {\n\n  const difficulties = useSelector((state: T.State) => state.difficulties);\n  const currentMode = useSelector((state: T.State) => state.currentMode);\n  const stage = useSelector((state: T.State) => state.stage);\n  const dispatch = useDispatch();\n\n  const gameModes = [START_GAME_MODE];\n  if(difficulties) {\n    gameModes.push(...Object.keys(difficulties));\n  }\n\n  function onChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const { value } = event.target;\n    dispatch({\n      type: Action.SET_CURRENT_MODE,\n      payload: value === START_GAME_MODE ? null : value,\n    });\n  }\n\n  return (\n    <select\n      className='select-mode'\n      value={currentMode || START_GAME_MODE}\n      onChange={onChange}\n      disabled={stage !== Stage.SETTING}\n    >\n      {gameModes.map(key => (\n        <option key={key} value={key}>\n          {key}\n        </option>)\n      )}\n    </select>\n  );\n}\n\nexport default SelectMode;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Action } from '../redux';\nimport * as T from \"../types\";\nimport { Stage } from '../common-info';\nimport './PlayButton.scss';\n\n\nfunction Button() {\n\n  const currentMode = useSelector((state: T.State) => state.currentMode);\n  const playerName = useSelector((state: T.State) => state.playerName);\n  const stage = useSelector((state: T.State) => state.stage);\n  const dispatch = useDispatch();\n\n  function onClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n\n    switch (stage) {\n\n      case Stage.SETTING:\n        dispatch({\n          type: Action.SET_STAGE,\n          payload: Stage.PLAYING,\n        });\n        break;\n\n      case Stage.PLAYING:\n      case Stage.WIN:\n        dispatch({\n          type: Action.SET_CURRENT_MODE,\n          payload: null,\n        });\n        dispatch({\n          type: Action.SET_SCORE,\n          payload: [0, 0],\n        });\n        dispatch({\n          type: Action.SET_STAGE,\n          payload: Stage.SETTING,\n        });\n        break;\n\n      default:\n        throw new Error();\n    }\n\n  }\n\n  const isDisabled = !playerName || !currentMode;\n\n  let label;\n  switch (stage) {\n    case Stage.SETTING:\n      label = 'PLAY';\n      break;\n    case Stage.PLAYING:\n    case Stage.WIN:\n      label = 'PLAY AGAIN';\n      break;\n    default:\n      throw new Error();\n  }\n\n  return (\n    <button\n      className='play-button'\n      onClick={onClick}\n      disabled={isDisabled}\n      style={{ opacity: isDisabled ? 0.1 : 1 }}\n    >\n      {label}\n    </button>\n  );\n}\n\nexport default Button;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Action } from '../redux';\nimport * as T from \"../types\";\nimport { Stage } from '../common-info';\nimport './TextField.scss';\n\n\n\nfunction TextField() {\n\n  const playerName = useSelector((state: T.State) => state.playerName);\n  const stage = useSelector((state: T.State) => state.stage);\n  const dispatch = useDispatch();\n  \n  function onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    dispatch({\n      type: Action.SET_PLAYER_NAME,\n      payload: event.target.value\n    });\n  }\n\n  return (\n    <input\n      className='text-field'\n      type='text'\n      value={playerName || ''}\n      placeholder='Enter your name'\n      onChange={onChange}\n      disabled={stage !== Stage.SETTING}\n    />\n  );\n}\n\n\nexport default TextField;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as T from \"../types\";\nimport { Stage } from '../common-info';\nimport './Message.scss';\n\n\n\nfunction Message() {\n\n  const currentMode = useSelector((state: T.State) => state.currentMode);\n  const playerName = useSelector((state: T.State) => state.playerName);\n  const stage = useSelector((state: T.State) => state.stage);\n  const score = useSelector((state: T.State) => state.score);\n\n  let message = '';\n  let color = '#888888';\n\n  switch (stage) {\n\n    case Stage.SETTING: {\n      const isStartGameMode = !currentMode;\n      const isAbsentPlayerName = !playerName;\n\n      if (isStartGameMode) {\n        message += 'pick game mode'\n      }\n\n      if (isStartGameMode && isAbsentPlayerName) {\n        message += ' and ';\n      }\n\n      if (isAbsentPlayerName) {\n        message += 'enter your name'\n      }\n\n      if (!message) {\n        message += 'push PLAY button, and good luck :-)'\n      }\n\n      message = `Please, ${message}`\n      color = 'sandybrown';\n\n      break;\n    }\n\n    case Stage.PLAYING: {\n      const [player, computer] = score;\n      message = `Score: You ${player} : ${computer} \"computer\"`\n      break;\n    }\n\n    case Stage.WIN: {\n      const [player, computer] = score;\n      message = `Game over. Score: ${player} : ${computer}. ${player > computer ? 'You are win!' : 'Computer win.'} \\nPlease, play again :-)`\n      break;\n    }\n\n    default:\n      throw new Error();\n  }\n\n  return message ? (\n    <p className=\"message\" style={{ color }}>\n      {message}\n    </p>\n  ) : null;\n}\n\nexport default Message;","export const fetchWrapper: typeof fetch = function (url, options) {\n  return fetch.apply(null, arguments as unknown as Parameters<typeof fetch>)\n    .then(res => {\n      if (res.ok) return res.json()\n      else throw new Error(`Fetch error with status: ${res.status}`)\n    })\n    .catch(err => console.error(err));\n}\n\n// This JavaScript function always returns a random number\n// between min (included) and max (excluded)\nexport function getRandomBetween(from: number, to: number) {\n  return Math.floor(Math.random() * (to - from)) + from;\n}","import React from 'react';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { Action } from '../redux';\nimport * as T from \"../types\";\nimport { fetchWrapper, getRandomBetween } from '../helpers';\nimport { GAME_WINNERS_URL, Stage, Color } from '../common-info';\nimport './Table.scss';\n\n\ntype Props = Readonly<{\n  store: T.State\n  dispatch: any\n}>\n\nclass Table extends React.Component<Props> {\n\n  private scoreLocal: T.Score;\n  private timerId: number | null;\n  private cell: T.Coordinate | null;\n  private isStarted: boolean;\n  private table: T.Table;\n  private coordinates: Array<T.Coordinate>;\n\n  constructor(readonly props: Props) {\n\n    super(props);\n\n    const { difficulties, currentMode } = this.props.store;\n    const { field } = difficulties![currentMode!];\n\n    this.timerId = null;\n    this.cell = [0, 0];\n    this.scoreLocal = [0, 0];\n    this.isStarted = false;\n\n    this.table = this.newTable(field);\n    this.coordinates = this.newCoordinates(field);\n  }\n\n  shouldComponentUpdate(newProps: Props) {\n\n    const { difficulties, currentMode } = newProps.store;\n    const { field } = difficulties![currentMode!];\n\n    const isFieldsEquals =\n      field === this.props.store.difficulties![this.props.store.currentMode!].field;\n\n    // Если размеры сетки изменились, обновить сетку\n    if (!isFieldsEquals) {\n      this.table = this.newTable(field);\n      this.coordinates = this.newCoordinates(field);\n    }\n\n    // Первый запуск таймера\n    const { stage } = newProps.store;\n    if (!this.isStarted && stage === Stage.PLAYING) {\n      this.selectRandomCell();\n      this.fillSelectedCell(Color.BLUE);\n      this.startTimer();\n      this.isStarted = true;\n    }\n\n    // Всегда true\n    return true;\n  }\n\n  componentWillUnmount() {\n    this.clearTimer();\n  }\n\n  newTable = (size: number) => {\n    return new Array(size)\n      .fill(null)\n      .map(el => new Array(size).fill(Color.DEFAULT)) as Array<Array<string>>;\n  }\n\n  newCoordinates = (size: number) => {\n    const array: Array<T.Coordinate> = [];\n    for (let row = 0; row < size; ++row) {\n      for (let col = 0; col < size; ++col) {\n        array.push([row, col]);\n      }\n    }\n    return array;\n  }\n\n  // Функция таймера\n  timer = () => {\n    // Фиксация текущих результатов\n    this.clearTimer();\n    this.fillSelectedCell(Color.RED);\n    this.incrementComputerScore(); // изменение локального игрового счёта\n\n    // Проверка, есть ли победитель?\n    const winner = this.checkWinner();\n    if (winner) {\n      this.sendResultsAndDispatchThem(winner);\n      this.dispatchStageWin();\n    } else {\n      this.selectRandomCell();\n      this.fillSelectedCell(Color.BLUE);\n      this.startTimer();\n      // this.forceUpdate();\n    }\n\n    // Отправка локального игрового счёта в redux\n    this.dispatchScore();\n  }\n\n  // Функция для обработки кликов\n  onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Фиксация текущих результатов\n    this.clearTimer();\n    this.fillSelectedCell(Color.GREEN);\n    this.incrementPlayerScore(); // изменение локального игрового счёта\n\n    // Проверка, есть ли победитель?\n    const winner = this.checkWinner();\n    if (winner) {\n      this.sendResultsAndDispatchThem(winner);\n      this.dispatchStageWin();\n    } else {\n      this.selectRandomCell();\n      this.fillSelectedCell(Color.BLUE);\n      this.startTimer();\n    }\n\n    // Отправка локального игрового счёта в redux\n    this.dispatchScore();\n  }\n\n  startTimer = () => {\n    const { difficulties, currentMode } = this.props.store;\n    const { delay } = difficulties![currentMode!];\n    if (delay) {\n      if (typeof this.timerId === 'number') {\n        /*DEBUG*/console.error(new Error());\n        this.clearTimer();\n      }\n      this.timerId = window.setTimeout(this.timer, delay);\n    }\n  }\n\n  clearTimer = () => {\n    if (typeof this.timerId === 'number') {\n      window.clearTimeout(this.timerId);\n      this.timerId = null;\n      return;\n    }\n    /*DEBUG*///console.error(new Error());\n  }\n\n  selectRandomCell = () => {\n    // Если ячейки закончились, то будет null\n    if (!this.coordinates.length) {\n      this.cell = null;\n    }\n\n    // Выбор случайной ячейки\n    const randomIndex = getRandomBetween(0, this.coordinates.length);\n    this.cell = this.coordinates[randomIndex];\n\n    // Удаление выбранной ячейки\n    this.coordinates.splice(randomIndex, 1);\n  }\n\n  fillSelectedCell = (color: Color) => {\n    // Если ячейки закончились, то будет null\n    if (this.cell) {\n      const [row, col] = this.cell;\n      this.table[row][col] = color;\n    }\n  }\n\n  incrementPlayerScore = () => {\n    ++this.scoreLocal[0]; // player +1\n  }\n\n  incrementComputerScore = () => {\n    ++this.scoreLocal[1]; // computer +1\n  }\n\n  dispatchScore = () => {\n    this.props.dispatch({\n      type: Action.SET_SCORE,\n      payload: [...this.scoreLocal],\n    })\n  }\n\n  // Если победитель есть, то вернуть его объект, в противном случае вернуть null\n  checkWinner = () => {\n\n    const { difficulties, currentMode, playerName, stage } = this.props.store;\n    const { field } = difficulties![currentMode!];\n\n    if (stage === Stage.WIN) return null;\n\n    const { scoreLocal } = this;\n    for (let index = 0, length = scoreLocal.length; index < length; ++index) {\n      const resultAbsolute = scoreLocal[index];\n      const resultRelative = resultAbsolute / Math.pow(field, 2) * 100;\n\n      if (resultRelative > 50) {\n\n        const winner = { date: new Date().toLocaleString() } as T.Winner;\n        switch (index) {\n          case 0:\n            winner.winner = playerName || '';\n            break\n          case 1:\n            winner.winner = 'computer';\n            break;\n          default:\n            throw new Error();\n        }\n\n        return winner;\n      }\n    }\n\n    return null;\n  }\n\n  sendResultsAndDispatchThem = (winner: T.Winner) => {\n\n    // Отправка данных на сервер и обновление рейтинга победителей\n    type AsyncAction = ThunkAction<void, T.State, undefined, AnyAction>;\n    const asyncAction: AsyncAction = (dispatch, getState) => {\n\n      const params = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(winner),\n      };\n\n      fetchWrapper(GAME_WINNERS_URL, params)\n        .then(res => dispatch({\n          type: Action.SET_WINNERS,\n          payload: res\n        }));\n    }\n\n    this.props.dispatch(asyncAction);\n  }\n\n  dispatchStageWin = () => {\n    this.props.dispatch({\n      type: Action.SET_STAGE,\n      payload: Stage.WIN,\n    });\n  }\n\n  render() {\n    return (\n      <table className='table'>\n        <tbody>\n          {this.table.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((color, colorIndex) => (\n                <td\n                  key={colorIndex}\n                  onClick={color === Color.BLUE ? this.onClick : null!}\n                  style={{ backgroundColor: color }}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default connect(\n  state => ({ store: state }),\n  dispatch => ({ dispatch }),\n)(Table as any);","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport SelectMode from \"./SelectMode\";\nimport Button from './PlayButton';\nimport TextField from './TextField';\nimport Message from './Message';\nimport Table from './Table';\nimport * as T from '../types';\nimport './Game.scss';\n\n\nfunction Game() {\n\n  const difficulties = useSelector((state: T.State) => state.difficulties);\n  const currentMode = useSelector((state: T.State) => state.currentMode);\n\n  return (\n    <div className='game'>\n      <div className='controls'>\n        <SelectMode />\n        <TextField />\n        <Button />\n      </div>\n      <Message />\n      {difficulties && currentMode && <Table />}\n    </div>\n  );\n}\n\nexport default Game;","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as T from \"../types\";\nimport './Winners.scss';\n\n\n\ntype Props = Readonly<{\n  winners: T.State['winners']\n}>\n\nconst Winners: React.FC<Props> = React.memo((props) => {\n\n  const { winners } = props;\n\n  return (\n    <div className='winners'>\n      <h3>Leader Board</h3>\n      {winners && (\n        <ul>\n          {winners.map(({ winner, date, id }) => (\n            <li key={id}>\n              <span>{winner}</span>\n              <span>{date}</span>\n            </li>\n          )).reverse()}\n        </ul>\n      )}\n    </div>\n  );\n});\n\nexport default connect(\n  (state: T.State) => ({ winners: state.winners }),\n)(Winners);","import React, { useEffect } from 'react';\nimport { AnyAction } from 'redux';\nimport { useDispatch } from 'react-redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { Action } from './redux';\nimport Game from './components/Game';\nimport Winners from './components/Winners'\nimport { fetchWrapper } from './helpers';\nimport * as T from './types';\nimport { GAME_SETTINGS_URL, GAME_WINNERS_URL } from './common-info';\n\n\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n\n    type AsyncAction = ThunkAction<void, T.State, undefined, AnyAction>;\n    const asyncAction: AsyncAction = (dispatch, getState) => {\n\n      fetchWrapper(GAME_SETTINGS_URL)\n        .then(res => dispatch({\n          type: Action.SET_DIFFICULTIES,\n          payload: res,\n        }));\n\n      fetchWrapper(GAME_WINNERS_URL)\n        .then(res => dispatch({\n          type: Action.SET_WINNERS,\n          payload: res,\n        }));\n    }\n\n    dispatch(asyncAction);\n  }, []);\n\n  return (\n    <>\n      <Game />\n      <div className=\"separator\" />\n      <Winners />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux';\n\nimport 'normalize.css';\nimport './styles/flexible.css';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}