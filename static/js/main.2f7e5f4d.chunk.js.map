{"version":3,"sources":["constants/index.ts","redux/index.ts","components/SelectMode.tsx","components/PlayButton.tsx","components/TextField.tsx","components/Message.tsx","helpers/index.ts","components/Table.tsx","components/Game.tsx","components/Winners.tsx","App.tsx","index.tsx"],"names":["Color","Stage","ActionType","GAME_WINNERS_URL","newState","difficulties","currentMode","playerName","winners","score","stage","SETTING","createStore","state","action","type","SET_DIFFICULTIES","payload","SET_CURRENT_MODE","SET_PLAYER_NAME","SET_WINNERS","SET_SCORE","SET_STAGE","composeWithDevTools","applyMiddleware","thunk","SelectMode","useSelector","dispatch","useDispatch","gameModes","push","Object","keys","className","value","onChange","event","target","disabled","map","key","Button","label","isDisabled","PLAYING","WIN","Error","onClick","style","opacity","TextField","placeholder","Message","message","color","isStartGameMode","isAbsentPlayerName","player","computer","fetchWrapper","args","arguments","fetch","apply","then","res","ok","json","catch","err","console","error","Table","props","scoreLocal","timerId","cell","isStarted","table","coordinates","newTable","size","Array","fill","el","DEFAULT","newCoordinates","array","row","col","timer","clearTimer","fillSelectedCell","RED","incrementComputerScore","winner","checkWinner","sendResultsAndDispatchThem","dispatchStageWin","selectRandomCell","BLUE","startTimer","dispatchScore","GREEN","incrementPlayerScore","store","delay","window","setTimeout","clearTimeout","length","from","to","randomIndex","Math","floor","random","splice","field","index","pow","date","Date","toLocaleString","getState","params","method","headers","body","JSON","stringify","newProps","this","rowIndex","colorIndex","backgroundColor","React","Component","connect","Game","Winners","memo","id","reverse","initialAction","App","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f7e5f4d.chunk.js","sourcesContent":["export const GAME_SETTINGS_URL = 'https://starnavi-frontend-test-task.herokuapp.com/game-settings';\nexport const GAME_WINNERS_URL = 'https://starnavi-frontend-test-task.herokuapp.com/winners';\n\nexport enum Color {\n  DEFAULT = 'transparent',\n  BLUE = '#42d8e8',\n  GREEN = '#00e871',\n  RED = '#e85a5e',\n};\n\nexport enum Stage {\n  SETTING,\n  PLAYING,\n  WIN\n};\n","import { createStore, applyMiddleware, Reducer, AnyAction } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport * as T from '../types'\nimport { Stage } from '../constants'\n\n// Action type\nexport enum ActionType {\n  SET_DIFFICULTIES = 'SET_DIFFICULTIES',\n  SET_CURRENT_MODE = 'SET_CURRENT_MODE',\n  SET_PLAYER_NAME = 'SET_PLAYER_NAME',\n  SET_WINNERS = 'SET_WINNERS',\n  SET_SCORE = 'SET_SCORE',\n  SET_STAGE = 'SET_STAGE',\n}\n\n// Create default state\nfunction newState(): T.State {\n  return {\n    difficulties: null,\n    currentMode: null,\n    playerName: null,\n    winners: null,\n    score: [0, 0],\n    stage: Stage.SETTING,\n  }\n}\n\n// Reducer\nconst reducer: Reducer<T.State, AnyAction & { payload: any }> = (\n  state = newState(),\n  action,\n) => {\n  switch (action.type) {\n    case ActionType.SET_DIFFICULTIES:\n      return {\n        ...state,\n        difficulties: action.payload,\n      }\n\n    case ActionType.SET_CURRENT_MODE:\n      return {\n        ...state,\n        currentMode: action.payload,\n      }\n\n    case ActionType.SET_PLAYER_NAME:\n      return {\n        ...state,\n        playerName: action.payload,\n      }\n\n    case ActionType.SET_WINNERS:\n      return {\n        ...state,\n        winners: action.payload,\n      }\n\n    case ActionType.SET_SCORE:\n      return {\n        ...state,\n        score: action.payload,\n      }\n\n    case ActionType.SET_STAGE:\n      return {\n        ...state,\n        stage: action.payload,\n      }\n\n    default:\n      return state\n  }\n}\n\n// Store\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ActionType } from '../redux'\nimport * as T from '../types'\nimport { Stage } from '../constants'\nimport './SelectMode.scss'\n\nconst START_GAME_MODE = 'Pick game mode'\n\nfunction SelectMode() {\n  const { difficulties, currentMode, stage } = useSelector(\n    ({ difficulties, currentMode, stage }: T.State) => ({\n      difficulties,\n      currentMode,\n      stage,\n    }),\n  )\n  const dispatch = useDispatch()\n\n  const gameModes = [START_GAME_MODE]\n  if (difficulties) {\n    gameModes.push(...Object.keys(difficulties))\n  }\n\n  function onChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const { value } = event.target\n    dispatch({\n      type: ActionType.SET_CURRENT_MODE,\n      payload: value === START_GAME_MODE ? null : value,\n    })\n  }\n\n  return (\n    <select\n      className='select-mode'\n      value={currentMode || START_GAME_MODE}\n      onChange={onChange}\n      disabled={stage !== Stage.SETTING}\n    >\n      {gameModes.map((key) => (\n        <option key={key} value={key}>\n          {key}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default SelectMode\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ActionType } from '../redux'\nimport * as T from '../types'\nimport { Stage } from '../constants'\nimport './PlayButton.scss'\n\nfunction Button() {\n  const { currentMode, playerName, stage } = useSelector(\n    ({ currentMode, playerName, stage }: T.State) => ({\n      currentMode,\n      playerName,\n      stage,\n    }),\n  )\n  const dispatch = useDispatch()\n\n  function onClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    switch (stage) {\n      case Stage.SETTING:\n        dispatch({\n          type: ActionType.SET_STAGE,\n          payload: Stage.PLAYING,\n        })\n        break\n\n      case Stage.PLAYING:\n      case Stage.WIN:\n        dispatch({\n          type: ActionType.SET_CURRENT_MODE,\n          payload: null,\n        })\n        dispatch({\n          type: ActionType.SET_SCORE,\n          payload: [0, 0],\n        })\n        dispatch({\n          type: ActionType.SET_STAGE,\n          payload: Stage.SETTING,\n        })\n        break\n\n      default:\n        throw new Error()\n    }\n  }\n\n  const isDisabled = !playerName || !currentMode\n\n  let label\n  switch (stage) {\n    case Stage.SETTING:\n      label = 'PLAY'\n      break\n    case Stage.PLAYING:\n    case Stage.WIN:\n      label = 'PLAY AGAIN'\n      break\n    default:\n      throw new Error()\n  }\n\n  return (\n    <button\n      className='play-button'\n      onClick={onClick}\n      disabled={isDisabled}\n      style={{ opacity: isDisabled ? 0.1 : 1 }}\n    >\n      {label}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ActionType } from '../redux'\nimport * as T from '../types'\nimport { Stage } from '../constants'\nimport './TextField.scss'\n\nfunction TextField() {\n  const {\n    playerName,\n    stage,\n  } = useSelector(({ playerName, stage }: T.State) => ({ playerName, stage }))\n\n  const dispatch = useDispatch()\n\n  function onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    dispatch({\n      type: ActionType.SET_PLAYER_NAME,\n      payload: event.target.value,\n    })\n  }\n\n  return (\n    <input\n      className='text-field'\n      type='text'\n      value={playerName || ''}\n      placeholder='Enter your name'\n      onChange={onChange}\n      disabled={stage !== Stage.SETTING}\n    />\n  )\n}\n\nexport default TextField\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport * as T from '../types'\nimport { Stage } from '../constants'\nimport './Message.scss'\n\nfunction Message() {\n  const { currentMode, playerName, stage, score } = useSelector(\n    ({ currentMode, playerName, stage, score }: T.State) => ({\n      currentMode,\n      playerName,\n      stage,\n      score,\n    }),\n  )\n\n  let message = ''\n  let color = '#888888'\n\n  switch (stage) {\n    case Stage.SETTING: {\n      const isStartGameMode = !currentMode\n      const isAbsentPlayerName = !playerName\n\n      if (isStartGameMode) {\n        message += 'pick game mode'\n      }\n\n      if (isStartGameMode && isAbsentPlayerName) {\n        message += ' and '\n      }\n\n      if (isAbsentPlayerName) {\n        message += 'enter your name'\n      }\n\n      if (!message) {\n        message += 'push PLAY button, and good luck :-)'\n      }\n\n      message = `Please, ${message}`\n      color = 'sandybrown'\n\n      break\n    }\n\n    case Stage.PLAYING: {\n      const [player, computer] = score\n      message = `Score: You ${player} : ${computer} \"computer\"`\n      break\n    }\n\n    case Stage.WIN: {\n      const [player, computer] = score\n      message = `Game over. Score: ${player} : ${computer}. ${\n        player > computer ? 'You are win!' : 'Computer win.'\n      } \\nPlease, play again :-)`\n      break\n    }\n\n    default:\n      throw new Error()\n  }\n\n  return message ? (\n    <p className='message' style={{ color }}>\n      {message}\n    </p>\n  ) : null\n}\n\nexport default Message\n","export const fetchWrapper: typeof fetch = function () {\n  const args = arguments as any as Parameters<typeof fetch>\n  return fetch.apply(null, args)\n    .then(res => {\n      if (res.ok) return res.json()\n    })\n    .catch(err => console.error(err));\n}\n\n// Returns a random number between min (included) and max (excluded)\nexport function getRandomBetween(from: number, to: number) {\n  return Math.floor(Math.random() * (to - from)) + from;\n}","import React from 'react'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport { ThunkAction } from 'redux-thunk'\nimport { ActionType } from '../redux'\nimport * as T from '../types'\nimport { fetchWrapper, getRandomBetween } from '../helpers'\nimport { GAME_WINNERS_URL, Stage, Color } from '../constants'\nimport './Table.scss'\n\ntype Props = Readonly<{\n  store: T.State\n  dispatch: any\n}>\n\nclass Table extends React.Component<Props> {\n  private scoreLocal: T.Score\n  private timerId: number | null\n  private cell: T.Coordinate | null\n  private isStarted: boolean\n  private table: T.Table\n  private coordinates: Array<T.Coordinate>\n\n  constructor(readonly props: Props) {\n    super(props)\n\n    const { difficulties, currentMode } = this.props.store\n    const { field } = difficulties![currentMode!]\n\n    this.timerId = null\n    this.cell = [0, 0]\n    this.scoreLocal = [0, 0]\n    this.isStarted = false\n\n    this.table = this.newTable(field)\n    this.coordinates = this.newCoordinates(field)\n  }\n\n  shouldComponentUpdate(newProps: Props) {\n    const { difficulties, currentMode } = newProps.store\n    const { field } = difficulties![currentMode!]\n\n    const isFieldsEquals =\n      field ===\n      this.props.store.difficulties![this.props.store.currentMode!].field\n\n    // Если размеры сетки изменились, обновить сетку\n    if (!isFieldsEquals) {\n      this.table = this.newTable(field)\n      this.coordinates = this.newCoordinates(field)\n    }\n\n    // Первый запуск таймера\n    const { stage } = newProps.store\n    if (!this.isStarted && stage === Stage.PLAYING) {\n      this.selectRandomCell()\n      this.fillSelectedCell(Color.BLUE)\n      this.startTimer()\n      this.isStarted = true\n    }\n\n    // Всегда true\n    return true\n  }\n\n  componentWillUnmount() {\n    this.clearTimer()\n  }\n\n  newTable = (size: number) => {\n    return new Array(size)\n      .fill(null)\n      .map((el) => new Array(size).fill(Color.DEFAULT)) as Array<Array<string>>\n  }\n\n  newCoordinates = (size: number) => {\n    const array: Array<T.Coordinate> = []\n    for (let row = 0; row < size; ++row) {\n      for (let col = 0; col < size; ++col) {\n        array.push([row, col])\n      }\n    }\n    return array\n  }\n\n  // Функция таймера\n  timer = () => {\n    // Фиксация текущих результатов\n    this.clearTimer()\n    this.fillSelectedCell(Color.RED)\n    this.incrementComputerScore() // изменение локального игрового счёта\n\n    // Проверка, есть ли победитель?\n    const winner = this.checkWinner()\n    if (winner) {\n      this.sendResultsAndDispatchThem(winner)\n      this.dispatchStageWin()\n    } else {\n      this.selectRandomCell()\n      this.fillSelectedCell(Color.BLUE)\n      this.startTimer()\n      // this.forceUpdate();\n    }\n\n    // Отправка локального игрового счёта в redux\n    this.dispatchScore()\n  }\n\n  // Функция для обработки кликов\n  onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Фиксация текущих результатов\n    this.clearTimer()\n    this.fillSelectedCell(Color.GREEN)\n    this.incrementPlayerScore() // изменение локального игрового счёта\n\n    // Проверка, есть ли победитель?\n    const winner = this.checkWinner()\n    if (winner) {\n      this.sendResultsAndDispatchThem(winner)\n      this.dispatchStageWin()\n    } else {\n      this.selectRandomCell()\n      this.fillSelectedCell(Color.BLUE)\n      this.startTimer()\n    }\n\n    // Отправка локального игрового счёта в redux\n    this.dispatchScore()\n  }\n\n  startTimer = () => {\n    const { difficulties, currentMode } = this.props.store\n    const { delay } = difficulties![currentMode!]\n    if (delay) {\n      if (typeof this.timerId === 'number') {\n        /*DEBUG*/ console.error(new Error())\n        this.clearTimer()\n      }\n      this.timerId = window.setTimeout(this.timer, delay)\n    }\n  }\n\n  clearTimer = () => {\n    if (typeof this.timerId === 'number') {\n      window.clearTimeout(this.timerId)\n      this.timerId = null\n      return\n    }\n    /*DEBUG*/ //console.error(new Error());\n  }\n\n  selectRandomCell = () => {\n    // Если ячейки закончились, то будет null\n    if (!this.coordinates.length) {\n      this.cell = null\n    }\n\n    // Выбор случайной ячейки\n    const randomIndex = getRandomBetween(0, this.coordinates.length)\n    this.cell = this.coordinates[randomIndex]\n\n    // Удаление выбранной ячейки\n    this.coordinates.splice(randomIndex, 1)\n  }\n\n  fillSelectedCell = (color: Color) => {\n    // Если ячейки закончились, то будет null\n    if (this.cell) {\n      const [row, col] = this.cell\n      this.table[row][col] = color\n    }\n  }\n\n  incrementPlayerScore = () => {\n    ++this.scoreLocal[0] // player +1\n  }\n\n  incrementComputerScore = () => {\n    ++this.scoreLocal[1] // computer +1\n  }\n\n  dispatchScore = () => {\n    this.props.dispatch({\n      type: ActionType.SET_SCORE,\n      payload: [...this.scoreLocal],\n    })\n  }\n\n  // Если победитель есть, то вернуть его объект, в противном случае вернуть null\n  checkWinner = () => {\n    const { difficulties, currentMode, playerName, stage } = this.props.store\n    const { field } = difficulties![currentMode!]\n\n    if (stage === Stage.WIN) return null\n\n    const { scoreLocal } = this\n    for (let index = 0, length = scoreLocal.length; index < length; ++index) {\n      const resultAbsolute = scoreLocal[index]\n      const resultRelative = (resultAbsolute / Math.pow(field, 2)) * 100\n\n      if (resultRelative > 50) {\n        const winner = { date: new Date().toLocaleString() } as T.Winner\n        switch (index) {\n          case 0:\n            winner.winner = playerName || ''\n            break\n          case 1:\n            winner.winner = 'computer'\n            break\n          default:\n            throw new Error()\n        }\n\n        return winner\n      }\n    }\n\n    return null\n  }\n\n  sendResultsAndDispatchThem = (winner: T.Winner) => {\n    // Отправка данных на сервер и обновление рейтинга победителей\n    type AsyncAction = ThunkAction<void, T.State, undefined, AnyAction>\n    const asyncAction: AsyncAction = (dispatch, getState) => {\n      const params = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(winner),\n      }\n\n      fetchWrapper(GAME_WINNERS_URL, params).then((res) =>\n        dispatch({\n          type: ActionType.SET_WINNERS,\n          payload: res,\n        }),\n      )\n    }\n\n    this.props.dispatch(asyncAction)\n  }\n\n  dispatchStageWin = () => {\n    this.props.dispatch({\n      type: ActionType.SET_STAGE,\n      payload: Stage.WIN,\n    })\n  }\n\n  render() {\n    return (\n      <table className='table'>\n        <tbody>\n          {this.table.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((color, colorIndex) => (\n                <td\n                  key={colorIndex}\n                  onClick={color === Color.BLUE ? this.onClick : null!}\n                  style={{ backgroundColor: color }}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({ store: state }),\n  (dispatch) => ({ dispatch }),\n)(Table as any)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport SelectMode from './SelectMode'\nimport Button from './PlayButton'\nimport TextField from './TextField'\nimport Message from './Message'\nimport Table from './Table'\nimport * as T from '../types'\nimport './Game.scss'\n\nfunction Game() {\n  const { difficulties, currentMode } = useSelector(\n    ({ difficulties, currentMode }: T.State) => ({\n      difficulties,\n      currentMode,\n    }),\n  )\n\n  return (\n    <div className='game'>\n      <div className='controls'>\n        <SelectMode />\n        <TextField />\n        <Button />\n      </div>\n      <Message />\n      {difficulties && currentMode && <Table />}\n    </div>\n  )\n}\n\nexport default Game\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as T from '../types'\nimport './Winners.scss'\n\ntype Props = Readonly<{\n  winners: T.State['winners']\n}>\n\nconst Winners: React.FC<Props> = React.memo((props) => {\n  const { winners } = props\n\n  return (\n    <div className='winners'>\n      <h3>{winners ? 'Leader Board' : 'Loading...'}</h3>\n      {winners && (\n        <ul>\n          {winners\n            .map(({ winner, date, id }) => (\n              <li key={id}>\n                <span>{winner}</span>\n                <span>{date}</span>\n              </li>\n            ))\n            .reverse()}\n        </ul>\n      )}\n    </div>\n  )\n})\n\nexport default connect(({ winners }: T.State) => ({ winners }))(Winners)\n","import React, { useEffect } from 'react'\nimport { AnyAction } from 'redux'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ThunkAction } from 'redux-thunk'\nimport { ActionType } from './redux'\nimport Game from './components/Game'\nimport Winners from './components/Winners'\nimport { fetchWrapper } from './helpers'\nimport * as T from './types'\nimport { GAME_SETTINGS_URL, GAME_WINNERS_URL } from './constants'\n\ntype AsyncAction = ThunkAction<void, T.State, undefined, AnyAction>\nconst initialAction: AsyncAction = (dispatch, getState) => {\n  fetchWrapper(GAME_SETTINGS_URL).then((res) =>\n    dispatch({\n      type: ActionType.SET_DIFFICULTIES,\n      payload: res,\n    }),\n  )\n\n  fetchWrapper(GAME_WINNERS_URL).then((res) =>\n    dispatch({\n      type: ActionType.SET_WINNERS,\n      payload: res,\n    }),\n  )\n}\n\nfunction App() {\n  const { difficulties, currentMode } = useSelector(\n    ({ difficulties, currentMode }: T.State) => ({\n      difficulties,\n      currentMode,\n    }),\n  )\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(initialAction)\n  }, [])\n\n  return (\n    <>\n      <Game />\n      <div\n        className={`separator${difficulties && currentMode ? ' hidden' : ''}`}\n      />\n      <Winners />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './redux'\n\nimport 'normalize.css'\nimport './styles/flexible.css'\nimport './styles/index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}